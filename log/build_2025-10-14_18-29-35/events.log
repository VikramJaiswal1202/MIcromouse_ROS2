[0.000000] (-) TimerEvent: {}
[0.000325] (-) JobUnselected: {'identifier': 'micromouse_description'}
[0.000462] (-) JobUnselected: {'identifier': 'micromouse_gazebo'}
[0.000827] (micromouse_control) JobQueued: {'identifier': 'micromouse_control', 'dependencies': OrderedDict()}
[0.001296] (micromouse_control) JobStarted: {'identifier': 'micromouse_control'}
[0.006344] (micromouse_control) JobProgress: {'identifier': 'micromouse_control', 'progress': 'cmake'}
[0.006919] (micromouse_control) JobProgress: {'identifier': 'micromouse_control', 'progress': 'build'}
[0.007569] (micromouse_control) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/vikram/micromouse_ws/build/micromouse_control', '--', '-j20', '-l20'], 'cwd': '/home/vikram/micromouse_ws/build/micromouse_control', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('LANGUAGE', 'en_IN:en'), ('USER', 'vikram'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/vikram'), ('CONDA_SHLVL', '0'), ('OLDPWD', '/home/vikram/micromouse_ws/src/micromouse_control/src'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('DBUS_STARTER_BUS_TYPE', 'session'), ('SYSTEMD_EXEC_PID', '2823'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus,guid=fd32a027e7016259998a3f8e68ee3dfa'), ('COLORTERM', 'truecolor'), ('_CE_M', ''), ('COLCON_PREFIX_PATH', '/home/vikram/micromouse_ws/install:/home/vikram/micromouse_ws/src/micromouse_gazebo/launch/install'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'vikram'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'vikram'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('_CE_CONDA', ''), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/home/vikram/anaconda3/condabin:/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/vikram-ROG-Zephyrus:@/tmp/.ICE-unix/2823,unix/vikram-ROG-Zephyrus:/tmp/.ICE-unix/2823'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/6e91935e_8fae_4529_94d5_fccd745fa26b'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':1'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.134'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/vikram/micromouse_ws/install/micromouse_gazebo:/home/vikram/micromouse_ws/install/micromouse_description:/home/vikram/micromouse_ws/install/micromouse_control:/opt/ros/humble'), ('CONDA_PYTHON_EXE', '/home/vikram/anaconda3/bin/python'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/vikram/micromouse_ws/build/micromouse_control'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('CONDA_EXE', '/home/vikram/anaconda3/bin/conda'), ('DBUS_STARTER_ADDRESS', 'unix:path=/run/user/1000/bus,guid=fd32a027e7016259998a3f8e68ee3dfa'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/share/gnome:/home/vikram/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/vikram/micromouse_ws/install/micromouse_gazebo:/home/vikram/micromouse_ws/install/micromouse_description:/home/vikram/micromouse_ws/install/micromouse_control:/opt/ros/humble')]), 'shell': False}
[0.025098] (micromouse_control) StdoutLine: {'line': b'-- Found ament_cmake: 1.3.12 (/opt/ros/humble/share/ament_cmake/cmake)\n'}
[0.099163] (micromouse_control) StdoutLine: {'line': b'-- Override CMake install command with custom implementation using symlinks instead of copying resources\n'}
[0.099973] (-) TimerEvent: {}
[0.103085] (micromouse_control) StdoutLine: {'line': b'-- Found rclcpp: 16.0.14 (/opt/ros/humble/share/rclcpp/cmake)\n'}
[0.119799] (micromouse_control) StdoutLine: {'line': b'-- Found rosidl_generator_c: 3.1.7 (/opt/ros/humble/share/rosidl_generator_c/cmake)\n'}
[0.121319] (micromouse_control) StdoutLine: {'line': b'-- Found rosidl_adapter: 3.1.7 (/opt/ros/humble/share/rosidl_adapter/cmake)\n'}
[0.124847] (micromouse_control) StdoutLine: {'line': b'-- Found rosidl_generator_cpp: 3.1.7 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)\n'}
[0.130542] (micromouse_control) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c\n'}
[0.138339] (micromouse_control) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp\n'}
[0.156716] (micromouse_control) StdoutLine: {'line': b'-- Found rmw_implementation_cmake: 6.1.2 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)\n'}
[0.157469] (micromouse_control) StdoutLine: {'line': b'-- Found rmw_fastrtps_cpp: 6.2.8 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)\n'}
[0.200165] (-) TimerEvent: {}
[0.218796] (micromouse_control) StdoutLine: {'line': b"-- Using RMW implementation 'rmw_fastrtps_cpp' as default\n"}
[0.248241] (micromouse_control) StdoutLine: {'line': b'-- Found geometry_msgs: 4.9.0 (/opt/ros/humble/share/geometry_msgs/cmake)\n'}
[0.255795] (micromouse_control) StdoutLine: {'line': b'-- Found sensor_msgs: 4.9.0 (/opt/ros/humble/share/sensor_msgs/cmake)\n'}
[0.266294] (micromouse_control) StdoutLine: {'line': b'-- Found ament_lint_auto: 0.12.14 (/opt/ros/humble/share/ament_lint_auto/cmake)\n'}
[0.300351] (-) TimerEvent: {}
[0.309041] (micromouse_control) StdoutLine: {'line': b"-- Added test 'cppcheck' to perform static code analysis on C / C++ code\n"}
[0.309142] (micromouse_control) StdoutLine: {'line': b'-- Configured cppcheck include dirs: \n'}
[0.309178] (micromouse_control) StdoutLine: {'line': b'-- Configured cppcheck exclude dirs and/or files: \n'}
[0.309427] (micromouse_control) StdoutLine: {'line': b"-- Added test 'lint_cmake' to check CMake code style\n"}
[0.309867] (micromouse_control) StdoutLine: {'line': b"-- Added test 'uncrustify' to check C / C++ code style\n"}
[0.309940] (micromouse_control) StdoutLine: {'line': b'-- Configured uncrustify additional arguments: \n'}
[0.310087] (micromouse_control) StdoutLine: {'line': b"-- Added test 'xmllint' to check XML markup files\n"}
[0.311861] (micromouse_control) StdoutLine: {'line': b'-- Configuring done\n'}
[0.316884] (micromouse_control) StdoutLine: {'line': b'-- Generating done\n'}
[0.319047] (micromouse_control) StdoutLine: {'line': b'-- Build files have been written to: /home/vikram/micromouse_ws/build/micromouse_control\n'}
[0.344498] (micromouse_control) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/micromouse_node.dir/src/micromouse_node.cpp.o\x1b[0m\n'}
[0.400473] (-) TimerEvent: {}
[0.500654] (-) TimerEvent: {}
[0.600991] (-) TimerEvent: {}
[0.701325] (-) TimerEvent: {}
[0.801668] (-) TimerEvent: {}
[0.902012] (-) TimerEvent: {}
[1.002357] (-) TimerEvent: {}
[1.102711] (-) TimerEvent: {}
[1.203052] (-) TimerEvent: {}
[1.303405] (-) TimerEvent: {}
[1.403751] (-) TimerEvent: {}
[1.504115] (-) TimerEvent: {}
[1.604472] (-) TimerEvent: {}
[1.704822] (-) TimerEvent: {}
[1.754412] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:70:7:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KMicromouse::Micromouse\x1b[m\x1b[K\xe2\x80\x99 has the same name as the class in which it is declared\n'}
[1.754584] (micromouse_control) StderrLine: {'line': b'   70 | class \x1b[01;31m\x1b[KMicromouse\x1b[m\x1b[K : public rclcpp::Node\n'}
[1.754637] (micromouse_control) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K^~~~~~~~~~\x1b[m\x1b[K\n'}
[1.761583] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KMicromouse::Micromouse()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[1.761679] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:23:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kparse error in template argument list\n'}
[1.761717] (micromouse_control) StderrLine: {'line': b'   23 |         ir_right_sub_ = this->\x1b[01;31m\x1b[Kcreate_subscription<sensor_msgs::msg/Range>\x1b[m\x1b[K(\n'}
[1.761748] (micromouse_control) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.761776] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:23:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KMicromouse::create_subscription<<expression error> >(const char [9], int, std::_Bind_helper<false, void (Micromouse::*)(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&), Micromouse*, const std::_Placeholder<1>&, const char (&)[6]>::type)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.761809] (micromouse_control) StderrLine: {'line': b'   23 |      ir_right_sub_ = \x1b[01;31m\x1b[Kthis->create_subscription<sensor_msgs::msg/Range>(\x1b[m\x1b[K\n'}
[1.761837] (micromouse_control) StderrLine: {'line': b'      |                      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[1.761865] (micromouse_control) StderrLine: {'line': b'\n'}
[1.761893] (micromouse_control) StderrLine: {'line': b'   24 | \x1b[01;31m\x1b[K         "ir_right", 10, std::bind(&Micromouse::ir_callback, this, std::placeholders::_1, "right"))\x1b[m\x1b[K;\n'}
[1.761923] (micromouse_control) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.761950] (micromouse_control) StderrLine: {'line': b'\n'}
[1.762572] (micromouse_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node.hpp:1321\x1b[m\x1b[K,\n'}
[1.762669] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/single_threaded_executor.hpp:28\x1b[m\x1b[K,\n'}
[1.762707] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:22\x1b[m\x1b[K,\n'}
[1.762737] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[1.762765] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:2\x1b[m\x1b[K:\n'}
[1.762793] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:92:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class MessageT, class CallbackT, class AllocatorT, class SubscriptionT, class MessageMemoryStrategyT> std::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr)\x1b[m\x1b[K\xe2\x80\x99\n'}
[1.762829] (micromouse_control) StderrLine: {'line': b'   92 | \x1b[01;36m\x1b[KNode\x1b[m\x1b[K::create_subscription(\n'}
[1.762858] (micromouse_control) StderrLine: {'line': b'      | \x1b[01;36m\x1b[K^~~~\x1b[m\x1b[K\n'}
[1.762885] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:92:1:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[1.762913] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:23:74:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Ktemplate argument 1 is invalid\n'}
[1.762940] (micromouse_control) StderrLine: {'line': b'   23 |      ir_right_sub_ = \x1b[01;31m\x1b[Kthis->create_subscription<sensor_msgs::msg/Range>(\x1b[m\x1b[K\n'}
[1.762967] (micromouse_control) StderrLine: {'line': b'      |                      \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[1.762993] (micromouse_control) StderrLine: {'line': b'\n'}
[1.763019] (micromouse_control) StderrLine: {'line': b'   24 | \x1b[01;31m\x1b[K         "ir_right", 10, std::bind(&Micromouse::ir_callback, this, std::placeholders::_1, "right"))\x1b[m\x1b[K;\n'}
[1.763046] (micromouse_control) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[1.763072] (micromouse_control) StderrLine: {'line': b'\n'}
[1.805012] (-) TimerEvent: {}
[1.905350] (-) TimerEvent: {}
[2.005700] (-) TimerEvent: {}
[2.060511] (micromouse_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[2.060925] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[2.060971] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[2.061006] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[2.061037] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[2.061066] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[2.061136] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[2.061186] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[2.061218] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.061247] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.061276] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:2\x1b[m\x1b[K:\n'}
[2.061305] (micromouse_control) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.061344] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::Range_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.061406] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::Range_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.061445] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.061481] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.061516] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:15:75:\x1b[m\x1b[K   required from here\n'}
[2.061556] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::Range_<std::allocator<void> >, std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[2.061611] (micromouse_control) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[2.061643] (micromouse_control) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.061671] (micromouse_control) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[2.061698] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[2.061727] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[2.061753] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[2.061778] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[2.061804] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[2.061832] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[2.061858] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[2.061886] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.061912] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.061937] (micromouse_control) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:2\x1b[m\x1b[K:\n'}
[2.061963] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062008] (micromouse_control) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[2.062035] (micromouse_control) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.062062] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[2.062088] (micromouse_control) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.062128] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062222] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062254] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::Range_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062285] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::Range_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062318] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062352] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062384] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:15:75:\x1b[m\x1b[K   required from here\n'}
[2.062419] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062449] (micromouse_control) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[2.062476] (micromouse_control) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.062502] (micromouse_control) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.062534] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::Range_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062569] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::Range_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062601] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062635] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Range_<std::allocator<void> >; CallbackT = std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Range_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Range_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062669] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/home/vikram/micromouse_ws/src/micromouse_control/src/micromouse_node.cpp:15:75:\x1b[m\x1b[K   required from here\n'}
[2.062696] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062733] (micromouse_control) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[2.062758] (micromouse_control) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.062785] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::Range_<std::allocator<void> >, std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062829] (micromouse_control) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[2.062855] (micromouse_control) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.062881] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.062919] (micromouse_control) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[2.062947] (micromouse_control) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.062975] (micromouse_control) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::Range_<std::allocator<void> >, std::_Bind<void (Micromouse::*(Micromouse*, std::_Placeholder<1>, const char*))(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const std::__cxx11::basic_string<char>&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::Range_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::Range_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::Range_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::Range_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::Range_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.063014] (micromouse_control) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[2.063041] (micromouse_control) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[2.105888] (-) TimerEvent: {}
[2.206229] (-) TimerEvent: {}
[2.306581] (-) TimerEvent: {}
[2.407080] (-) TimerEvent: {}
[2.507444] (-) TimerEvent: {}
[2.607810] (-) TimerEvent: {}
[2.708166] (-) TimerEvent: {}
[2.808567] (-) TimerEvent: {}
[2.908925] (-) TimerEvent: {}
[3.009232] (-) TimerEvent: {}
[3.109577] (-) TimerEvent: {}
[3.209930] (-) TimerEvent: {}
[3.263503] (micromouse_control) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/micromouse_node.dir/build.make:76: CMakeFiles/micromouse_node.dir/src/micromouse_node.cpp.o] Error 1\n'}
[3.263867] (micromouse_control) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/micromouse_node.dir/all] Error 2\n'}
[3.263950] (micromouse_control) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[3.265555] (micromouse_control) CommandEnded: {'returncode': 2}
[3.271527] (micromouse_control) JobEnded: {'identifier': 'micromouse_control', 'rc': 2}
[3.281992] (-) EventReactorShutdown: {}
